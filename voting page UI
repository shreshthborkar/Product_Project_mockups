import React, { useState } from 'react';
import { Vote, TreePine, Zap, Factory, Droplets, Wind, Users, Globe, ArrowLeft, Check } from 'lucide-react';

const VotingPage = () => {
  const [votes, setVotes] = useState({});
  const [totalVotesUsed, setTotalVotesUsed] = useState(0);
  const [showConfirmation, setShowConfirmation] = useState(false);
  
  const availableVotes = 18; // From user's offset orders
  const totalFundAmount = 270; // Total rupees from user's offset purchases (18 orders × ₹15)
  
  const votingOptions = [
    {
      id: 'reforestation',
      title: 'Tree Plantation & Reforestation',
      description: 'Fund large-scale tree planting projects across India and globally. Each tree planted absorbs ~22kg CO₂ annually.',
      organization: 'UN Environment Programme',
      icon: <TreePine className="w-8 h-8 text-green-600" />,
      currentVotes: 1247,
      currentPercentage: 28,
      impact: '1 vote = 2 trees planted',
      color: 'green'
    },
    {
      id: 'renewable',
      title: 'Renewable Energy Projects',
      description: 'Support solar and wind energy installations in rural communities, reducing dependence on fossil fuels.',
      organization: 'International Solar Alliance',
      icon: <Zap className="w-8 h-8 text-yellow-600" />,
      currentVotes: 982,
      currentPercentage: 22,
      impact: '1 vote = 10kWh clean energy',
      color: 'yellow'
    },
    {
      id: 'carbon-capture',
      title: 'Carbon Capture Technology',
      description: 'Invest in cutting-edge technology that removes CO₂ directly from the atmosphere and stores it safely.',
      organization: 'Global CCS Institute',
      icon: <Factory className="w-8 h-8 text-blue-600" />,
      currentVotes: 756,
      currentPercentage: 17,
      impact: '1 vote = 5kg CO₂ captured',
      color: 'blue'
    },
    {
      id: 'ocean-cleanup',
      title: 'Ocean & Marine Conservation',
      description: 'Protect marine ecosystems, clean ocean plastic, and restore coral reefs that act as carbon sinks.',
      organization: 'Ocean Conservancy',
      icon: <Droplets className="w-8 h-8 text-cyan-600" />,
      currentVotes: 634,
      currentPercentage: 14,
      impact: '1 vote = 1m² ocean cleaned',
      color: 'cyan'
    },
    {
      id: 'sustainable-transport',
      title: 'Clean Transportation',
      description: 'Promote electric vehicles, public transport, and cycling infrastructure to reduce transport emissions.',
      organization: 'Global Green Transport',
      icon: <Wind className="w-8 h-8 text-purple-600" />,
      currentVotes: 523,
      currentPercentage: 12,
      impact: '1 vote = 1 day EV charging',
      color: 'purple'
    },
    {
      id: 'community-programs',
      title: 'Local Community Programs',
      description: 'Support grassroots environmental initiatives, education programs, and sustainable farming practices.',
      organization: 'Green Communities India',
      icon: <Users className="w-8 h-8 text-orange-600" />,
      currentVotes: 312,
      currentPercentage: 7,
      impact: '1 vote = 1 family trained',
      color: 'orange'
    }
  ];
  
  const handleVoteChange = (optionId, voteCount) => {
    const newVotes = { ...votes };
    newVotes[optionId] = Math.max(0, voteCount);
    
    // Calculate total votes used
    const totalUsed = Object.values(newVotes).reduce((sum, count) => sum + count, 0);
    
    if (totalUsed <= availableVotes) {
      setVotes(newVotes);
      setTotalVotesUsed(totalUsed);
    }
  };
  
  const handleSubmitVotes = () => {
    if (totalVotesUsed > 0) {
      setShowConfirmation(true);
    }
  };
  
  const getColorClasses = (color) => {
    const colorMap = {
      green: 'border-green-200 bg-green-50 text-green-700',
      yellow: 'border-yellow-200 bg-yellow-50 text-yellow-700',
      blue: 'border-blue-200 bg-blue-50 text-blue-700',
      cyan: 'border-cyan-200 bg-cyan-50 text-cyan-700',
      purple: 'border-purple-200 bg-purple-50 text-purple-700',
      orange: 'border-orange-200 bg-orange-50 text-orange-700'
    };
    return colorMap[color] || 'border-gray-200 bg-gray-50 text-gray-700';
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8">
      <div className="max-w-4xl mx-auto px-4">
        {/* Header */}
        <div className="flex items-center mb-6">
          <button className="mr-4 p-2 text-gray-600 hover:text-gray-900 transition-colors">
            <ArrowLeft className="w-5 h-5" />
          </button>
          <div>
            <h1 className="text-2xl font-bold text-gray-900 flex items-center">
              <Vote className="w-7 h-7 text-blue-600 mr-3" />
              Vote for Environmental Impact
            </h1>
            <p className="text-gray-600 mt-1">
              Decide where your ₹{totalFundAmount} carbon offset contribution should go
            </p>
          </div>
        </div>

        {/* Voting Stats */}
        <div className="bg-white rounded-xl shadow-lg p-6 mb-6">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="text-center p-4 bg-blue-50 rounded-lg">
              <div className="text-2xl font-bold text-blue-600">{availableVotes}</div>
              <div className="text-sm text-gray-600">Total Voting Rights</div>
              <div className="text-xs text-gray-500 mt-1">From {availableVotes} offset orders</div>
            </div>
            <div className="text-center p-4 bg-green-50 rounded-lg">
              <div className="text-2xl font-bold text-green-600">{totalVotesUsed}</div>
              <div className="text-sm text-gray-600">Votes Allocated</div>
              <div className="text-xs text-gray-500 mt-1">
                {availableVotes - totalVotesUsed} remaining
              </div>
            </div>
            <div className="text-center p-4 bg-purple-50 rounded-lg">
              <div className="text-2xl font-bold text-purple-600">₹{totalFundAmount}</div>
              <div className="text-sm text-gray-600">Your Fund Amount</div>
              <div className="text-xs text-gray-500 mt-1">Ready to allocate</div>
            </div>
          </div>
        </div>

        {/* Voting Options */}
        <div className="space-y-4 mb-6">
          {votingOptions.map((option) => (
            <div key={option.id} className="bg-white rounded-xl shadow-lg p-6">
              <div className="flex items-start justify-between mb-4">
                <div className="flex items-start space-x-4">
                  <div className={`p-3 rounded-lg ${getColorClasses(option.color)}`}>
                    {option.icon}
                  </div>
                  <div className="flex-1">
                    <h3 className="text-lg font-semibold text-gray-900 mb-1">
                      {option.title}
                    </h3>
                    <p className="text-gray-600 text-sm mb-2">{option.description}</p>
                    <div className="flex items-center space-x-4 text-xs text-gray-500">
                      <span className="flex items-center">
                        <Globe className="w-3 h-3 mr-1" />
                        {option.organization}
                      </span>
                      <span className="font-medium text-green-600">{option.impact}</span>
                    </div>
                  </div>
                </div>
                
                {/* Vote Input */}
                <div className="flex items-center space-x-2">
                  <button
                    onClick={() => handleVoteChange(option.id, (votes[option.id] || 0) - 1)}
                    className="w-8 h-8 rounded-full bg-gray-200 hover:bg-gray-300 flex items-center justify-center text-gray-600 font-bold"
                    disabled={!votes[option.id] || votes[option.id] <= 0}
                  >
                    -
                  </button>
                  <div className="w-12 text-center">
                    <span className="text-lg font-semibold">{votes[option.id] || 0}</span>
                  </div>
                  <button
                    onClick={() => handleVoteChange(option.id, (votes[option.id] || 0) + 1)}
                    className="w-8 h-8 rounded-full bg-blue-600 hover:bg-blue-700 flex items-center justify-center text-white font-bold"
                    disabled={totalVotesUsed >= availableVotes}
                  >
                    +
                  </button>
                </div>
              </div>
              
              {/* Current Results */}
              <div className="border-t pt-4">
                <div className="flex items-center justify-between text-sm text-gray-600 mb-2">
                  <span>Current community votes: {option.currentVotes.toLocaleString()}</span>
                  <span>{option.currentPercentage}%</span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-2">
                  <div 
                    className={`h-2 rounded-full bg-${option.color}-500`}
                    style={{ width: `${option.currentPercentage}%` }}
                  ></div>
                </div>
              </div>
            </div>
          ))}
        </div>

        {/* Submit Section */}
        <div className="bg-white rounded-xl shadow-lg p-6">
          <div className="flex items-center justify-between">
            <div>
              <h3 className="text-lg font-semibold text-gray-900 mb-1">Ready to Submit?</h3>
              <p className="text-gray-600 text-sm">
                {totalVotesUsed > 0 
                  ? `You've allocated ${totalVotesUsed} votes. Your voice matters!`
                  : 'Allocate your votes to make an environmental impact'
                }
              </p>
            </div>
            <button
              onClick={handleSubmitVotes}
              disabled={totalVotesUsed === 0}
              className={`px-6 py-3 rounded-lg font-semibold transition-colors ${
                totalVotesUsed > 0
                  ? 'bg-blue-600 hover:bg-blue-700 text-white'
                  : 'bg-gray-300 text-gray-500 cursor-not-allowed'
              }`}
            >
              Submit Votes
            </button>
          </div>
          
          {totalVotesUsed > 0 && (
            <div className="mt-4 p-3 bg-blue-50 rounded-lg">
              <p className="text-sm text-blue-800">
                <strong>Your allocation:</strong> {Object.entries(votes)
                  .filter(([_, count]) => count > 0)
                  .map(([id, count]) => {
                    const option = votingOptions.find(opt => opt.id === id);
                    return `${option?.title}: ${count} votes`;
                  })
                  .join(', ')}
              </p>
            </div>
          )}
        </div>

        {/* Confirmation Modal */}
        {showConfirmation && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
            <div className="bg-white rounded-lg max-w-md w-full p-6">
              <div className="text-center">
                <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
                  <Check className="w-8 h-8 text-green-600" />
                </div>
                <h2 className="text-xl font-semibold text-gray-900 mb-2">Votes Submitted!</h2>
                <p className="text-gray-600 mb-4">
                  Thank you for making your voice heard. Your {totalVotesUsed} votes have been counted towards creating a greener future.
                </p>
                <div className="space-y-2 text-sm text-gray-600 mb-6">
                  {Object.entries(votes)
                    .filter(([_, count]) => count > 0)
                    .map(([id, count]) => {
                      const option = votingOptions.find(opt => opt.id === id);
                      return (
                        <div key={id} className="flex justify-between">
                          <span>{option?.title}</span>
                          <span className="font-semibold">{count} votes</span>
                        </div>
                      );
                    })}
                </div>
                <button
                  onClick={() => setShowConfirmation(false)}
                  className="w-full bg-green-600 text-white py-2 rounded-lg font-semibold hover:bg-green-700 transition-colors"
                >
                  Continue Shopping
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default VotingPage;
